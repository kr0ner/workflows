name: Build

on:
  workflow_call:
    inputs:
      files:
        description: Newline separated list of files to build
        required: true
        type: string
      esphome-version:
        description: Version of ESPHome to build with
        required: false
        type: string
        default: latest
      release-summary:
        description: Summary of the release
        required: false
        type: string
        default: ""
      release-url:
        description: URL to the release notes
        required: false
        type: string
        default: ""
      release-version:
        description: Version of the release
        required: false
        type: string
        default: ""
      combined-name:
        description: Combine all files into a single manifest under this name
        required: false
        type: string
        default: ""

    outputs:
      version:
        description: Version of the firmware generated
        value: ${{ jobs.prepare.outputs.version }}

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.files-array.outputs.files }}
      version: ${{ steps.version.outputs.version }}
      artifact-prefix: ${{ steps.artifact-name.outputs.artifact-prefix }}
    steps:
      - name: Split files input into JSON array
        id: files-array
        run: |
          files=$(echo "${{ inputs.files }}" | jq -RcSn '[inputs | select(length>0)]')
          echo files=$files >> $GITHUB_OUTPUT
      - name: Generate version
        id: version
        run: |
          if [ -n "${{ inputs.release-version }}" ]; then
            version=${{ inputs.release-version }}
          else
            version=dev-$(date +'%Y%m%d-%H%M')
          fi

          echo version=$version >> $GITHUB_OUTPUT
      - name: Generated random artifact prefix
        id: artifact-name
        run: |
          artifact_prefix=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 16; echo)
          echo artifact-prefix=$artifact_prefix >> $GITHUB_OUTPUT

  build:
    name: ${{ matrix.file }}
    needs: [prepare]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        file: ${{ fromJson(needs.prepare.outputs.files) }}
    steps:
      - name: Dump vars context
        env:
          VARS_JSON: ${{ toJSON(github) }}
        run: echo "${VARS_JSON}"
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          path: 'esphome/OneESP32ToRuleThemAll'
          ref: ${{ github.event.issue.pull_request.head.sha || github.event.pull_request.head.sha || github.sha }}
      - name: Write secrets
        uses: "DamianReeves/write-file-action@master"
        with:
          path: ${{ github.workspace }}/esphome/secrets.yaml
          write-mode: overwrite
          contents: |
            wifi_ssid: "TestWifi"
            wifi_password: "123456"
            fallback_ssid: "Fallback Hotspot"
            fallback_password: "123456"
            api_password: "123456"
            ota_password: "123456"
            api_encryption_key: "PK1TIZ9i0zyXWT9DXOFjvgDxq293t5Rti1q+evtOWxc="
            mqtt_server: "192.168.1.2"
            mqtt_user: "esphome"
            mqtt_password: "123456"
      - name: Thz504
        run: |
          cp ${{ github.workspace }}/esphome/OneESP32ToRuleThemAll/esp32-poe-technik.yaml ${{ github.workspace }}/esphome/esp32-poe-technik.yaml
      - name: Thz404
        run: |
          cp ${{ github.workspace }}/esphome/OneESP32ToRuleThemAll/esp32-poe-technik.yaml ${{ github.workspace }}/esphome/esp32-poe-technik-thz404.yaml
          sed -i 's/^#\s*thz404:/  thz404:/; s/^  thz504:/#\0/' ${{ github.workspace }}/esphome/esp32-poe-technik-thz404.yaml
      - name: Thz55eco
        run: |
          cp ${{ github.workspace }}/esphome/OneESP32ToRuleThemAll/esp32-poe-technik.yaml ${{ github.workspace }}/esphome/esp32-poe-technik-thz55eco.yaml
          sed -i 's/^#\s*thz55eco:/  thz55eco:/; s/^  thz504:/#\0/' ${{ github.workspace }}/esphome/esp32-poe-technik-thz55eco.yaml
      - name: Ttf07
        run: |
          cp ${{ github.workspace }}/esphome/OneESP32ToRuleThemAll/esp32-poe-technik.yaml ${{ github.workspace }}/esphome/esp32-poe-technik-ttf07.yaml
          sed -i 's/^#\s*ttf07:/  ttf07:/; s/^  thz504:/#\0/' ${{ github.workspace }}/esphome/esp32-poe-technik-ttf07.yaml
      - name: Replace project version
        run: |
          sed -i "s/version: dev/version: ${{ needs.prepare.outputs.version }}/g" ${{ matrix.file }}
      - name: Run clang-format
        run: |
          sudo apt-get update
          sudo apt-get install clang-format-14
          cd ${{ github.workspace }}/esphome/OneESP32ToRuleThemAll/
          find . -name '*.cpp' -o -name '*.h' -o -name '*.ino' | xargs clang-format-14 -i
          git diff --exit-code --color || (echo "Please run clang-format on your code." && exit 1)
      - name: Build Firmware for Thz504
        uses: esphome/build-action@v4.0.3
        id: esphome-build
        with:
          yaml-file: ${{ github.workspace }}/esphome/esp32-poe-technik.yaml
          version: ${{ inputs.esphome-version }}
          cache: true
      - name: Build Firmware for Thz404
        uses: esphome/build-action@v4.0.3
        id: esphome-build-thz404
        with:
          yaml-file: ${{ github.workspace }}/esphome/esp32-poe-technik-thz404.yaml
          version: ${{ inputs.esphome-version }}
          cache: true
      - name: Build Firmware for Thz55eco
        uses: esphome/build-action@v4.0.3
        id: esphome-build-thz55eco
        with:
          yaml-file: ${{ github.workspace }}/esphome/esp32-poe-technik-thz55eco.yaml
          version: ${{ inputs.esphome-version }}
          cache: true
      - name: Build Firmware for Ttf07
        uses: esphome/build-action@v4.0.3
        id: esphome-build-ttf07
        with:
          yaml-file: ${{ github.workspace }}/esphome/esp32-poe-technik-ttf07.yaml
          version: ${{ inputs.esphome-version }}
          cache: true
      - name: Report build status
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let status;
            if ('${{ job.status }}' === 'success') {
              status = 'completed successfully';
            } else {
              status = 'failed';
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `The GitHub Actions build has ${status}. Check the [workflow run details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more information.`
            })
